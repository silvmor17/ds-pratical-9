Clark Ltd
The financial company in VKHCG is the Clark accounting firm that VKHCG owns with a 60% stake. The
accountants are the financial advisers to the group and handle everything to do with the complex work of
international accounting.
Financials
The VKHCG companies did well last year, and the teams at Clark must prepare a balance sheet for each
company in the group. The companies require a balance sheet for each company, to be produced using the
template (Balance-Sheet-Template.xlsx) that can be found in the example directory (..\VKHCG\04-Clark\00-
RawData).
The Program will guide you through a process that will enable you to merge the data science with preformatted
Microsoft Excel template, to produce a balance sheet for each of the VKHCG companies.
C:\VKHCG\04-Clark\06-Report\Report-Balance-Sheet.py
# -*- coding: utf-8 -*-
################################################################
import sys
import os
import pandas as pd
import sqlite3 as sq
import re
from openpyxl import load_workbook
################################################################
Base='C:/VKHCG'
################################################################
print('################################')
print('Working Base :',Base, ' using ', sys.platform)
print('################################')
################################################################
sInputTemplateName='00-RawData/Balance-Sheet-Template.xlsx'
################################################################
sOutputFileName='06-Report/01-EDS/02-Python/Report-Balance-Sheet'
Company='04-Clark'
################################################################
sDatabaseName=Base + '/' + Company + '/06-Report/SQLite/clark.db'
conn = sq.connect(sDatabaseName)
#conn = sq.connect(':memory:')
################################################################
### Import Balance Sheet Data
################################################################
for y in range(1,13):
 sInputFileName='00-RawData/BalanceSheets' + str(y).zfill(2) + '.csv'
 sFileName=Base + '/' + Company + '/' + sInputFileName
 print('################################')
 print('Loading :',sFileName)
 print('################################')
 ForexDataRaw=pd.read_csv(sFileName,header=0,low_memory=False, encoding="latin-1")
 print('################################')
 ################################################################
 ForexDataRaw.index.names = ['RowID']
 sTable='BalanceSheets'
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
199
 print('Storing :',sDatabaseName,' Table:',sTable)
 if y == 1:
 print('Load Data')
 ForexDataRaw.to_sql(sTable, conn, if_exists="replace")
 else:
 print('Append Data')
 ForexDataRaw.to_sql(sTable, conn, if_exists="append")
################################################################
sSQL="SELECT \
 Year, \
 Quarter, \
 Country, \
 Company, \
 CAST(Year AS INT) || 'Q' || CAST(Quarter AS INT) AS sDate, \
 Company || ' (' || Country || ')' AS sCompanyName , \
 CAST(Year AS INT) || 'Q' || CAST(Quarter AS INT) || '-' ||\
 Company || '-' || Country AS sCompanyFile \
 FROM BalanceSheets \
 GROUP BY \
 Year, \
 Quarter, \
 Country, \
 Company \
 HAVING Year is not null \
 ;"
sSQL=re.sub("\s\s+", " ", sSQL)
sDatesRaw=pd.read_sql_query(sSQL, conn)
print(sDatesRaw.shape)
sDates=sDatesRaw.head(5)
################################################################
## Loop Dates
################################################################
for i in range(sDates.shape[0]):
 sFileName=Base + '/' + Company + '/' + sInputTemplateName
 wb = load_workbook(sFileName)
 ws=wb.get_sheet_by_name("Balance-Sheet")
 sYear=sDates['sDate'][i]
 sCompany=sDates['sCompanyName'][i]
 sCompanyFile=sDates['sCompanyFile'][i]
 sCompanyFile=re.sub("\s+", "", sCompanyFile)

 ws['D3'] = sYear
 ws['D5'] = sCompany

 sFields = pd.DataFrame(
 [
 ['Cash','D16', 1],
 ['Accounts_Receivable','D17', 1],
 ['Doubtful_Accounts','D18', 1],
 ['Inventory','D19', 1],
 ['Temporary_Investment','D20', 1],
 ['Prepaid_Expenses','D21', 1],
 ['Long_Term_Investments','D24', 1],
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
200
 ['Land','D25', 1],
 ['Buildings','D26', 1],
 ['Depreciation_Buildings','D27', -1],
 ['Plant_Equipment','D28', 1],
 ['Depreciation_Plant_Equipment','D29', -1],
 ['Furniture_Fixtures','D30', 1],
 ['Depreciation_Furniture_Fixtures','D31', -1],
 ['Accounts_Payable','H16', 1],
 ['Short_Term_Notes','H17', 1],
 ['Current_Long_Term_Notes','H18', 1],
 ['Interest_Payable','H19', 1],
 ['Taxes_Payable','H20', 1],
 ['Accrued_Payroll','H21', 1],
 ['Mortgage','H24', 1],
 ['Other_Long_Term_Liabilities','H25', 1],
 ['Capital_Stock','H30', 1]
 ]
 )

 nYear=str(int(sDates['Year'][i]))
 nQuarter=str(int(sDates['Quarter'][i]))
 sCountry=str(sDates['Country'][i])
 sCompany=str(sDates['Company'][i])

 sFileName=Base + '/' + Company + '/' + sOutputFileName + \
 '-' + sCompanyFile + '.xlsx'

 print(sFileName)

 for j in range(sFields.shape[0]):

 sSumField=sFields[0][j]
 sCellField=sFields[1][j]
 nSumSign=sFields[2][j]

 sSQL="SELECT \
 Year, \
 Quarter, \
 Country, \
 Company, \
 SUM(" + sSumField + ") AS nSumTotal \
 FROM BalanceSheets \
 GROUP BY \
 Year, \
 Quarter, \
 Country, \
 Company \
 HAVING \
 Year=" + nYear + " \
 AND \
 Quarter=" + nQuarter + " \
 AND \
 Country='" + sCountry + "' \
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
201
 AND \
 Company='" + sCompany + "' \
 ;"
 sSQL=re.sub("\s\s+", " ", sSQL)
 sSumRaw=pd.read_sql_query(sSQL, conn)
 ws[sCellField] = sSumRaw["nSumTotal"][0] * nSumSign
 print('Set cell',sCellField,' to ', sSumField,'Total')
 wb.save(sFileName)
Output:
You now have all the reports you need.
Check the Following files for generated reports in C:/VKHCG/04-Clark/06-Report/01-EDS/02-Python/
1. Report-Balance-Sheet-2000Q1-Clark-Afghanistan.xlsx
2. Report-Balance-Sheet-2000Q1-Hillman-Afghanistan.xlsx
3. Report-Balance-Sheet-2000Q1-Krennwallner-Afghanistan.xlsx
4. Report-Balance-Sheet-2000Q1-Vermeulen-Afghanistan.xlsx
5. Report-Balance-Sheet-2000Q1-Clark-AlandIslands.xlsx

Graphics
This section will now guide you through a number of visualizations that particularly useful in presenting data
to my customers.
Pie Graph
Double Pie
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_A.py
Line Graph
C:/VKHCG/01-Vermeulen/06-Report/Report_Graph_A.py
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
202
Bar Graph / Horizontal Bar Graph
C:/VKHCG/01-Vermeulen/06-Report/Report_Graph_A.py
Area Graph
C:/VKHCG/01-Vermeulen/06-Report/Report_Graph_A.py
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
203
Scatter Graph : VKHCG/03-Hillman/06-Report/Report-Scatterplot-With-Encircling.r
Hexbin:
Program : C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_A.py
Kernel Density Estimation (KDE) Graph
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_B.py
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
204
Scatter Matrix Graph
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_B.py
Andrews’ Curves
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_C.py
Parallel Coordinates
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_C.py
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
205
RADVIZ Method
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_C.py
Lag Plot
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_D.py
Autocorrelation Plot
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_D.py
PSIT1P2 ~~~~~ Data Science Practical
M. Sc. [Information Technology ] SEMESTER ~ I Teacher’s Reference Manual
206
Bootstrap Plot
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_D.py
Contour Graphs
C:\VKHCG\01-Vermeulen\06-Report\Report_Graph_G.py
3D Graphs
C:\VKHCG\01-Vermeulen\06-Report\Report_PCA_IRIS.py
(add import matplotlib.cm as cm & Replace : plt.cm.spectral cm.get_cmap("Spectral") at Line 44)